Project Brief ‚Äî Chores & Rewards (Minimal)
Goal

Build a minimal chores tracker where parents/carers can:

Add children

Choose a child ‚Üí mark chores as Complete (chores stay in list)

Track a running total owed to each child

Hit Payout to reset total and log the payout in History

Add/edit chores and children in Settings

Export/Import JSON backups

Everything should be offline-first, with no login, no server, and no analytics.

Tech Stack

React + Vite

TailwindCSS for styling

shadcn/ui components (Radix based)

IndexedDB for local storage (idb wrapper)

Sonner or shadcn toast for confirmations

canvas-confetti for fun payouts

Service worker for offline PWA

Design & UX

Palette inspired by Brisbane Kids
 (coral, teal, yellow, sky blue, clean neutrals).

Apply Refactoring UI principles (Adam Wathan & Steve Schoger): clear hierarchy, whitespace, cards, rounded corners, soft shadows.

Duolingo-style feedback:

Chore complete ‚Üí small toast + haptic + sound tick

Payout ‚Üí confetti + celebratory toast + coin sound

All effects toggleable in Settings

Pages

First Run ‚Üí Add Child screen

Home ‚Üí List of children + running totals

Child Page ‚Üí List of chores, ‚ÄúComplete‚Äù button, payout at bottom

Totals ‚Üí All children totals, global total, per-child payout

History ‚Üí Payout log with child, amount, date/time

Settings ‚Üí Manage children/chores + toggle effects + Export/Import JSON

PWA & Portability

Manifest with app name, icons (192, 512, maskable), theme color coral.

Service worker caches app shell for offline use.

Port-to-Play ready: clean dist/ build, /.well-known/assetlinks.json placeholder for TWA (Play Store later).

App URL will be https://choresandrewards.app
.

Acceptance Criteria

 First run shows Add Child; after that, Home lists children + totals.

 Completing a chore adds to total and shows satisfying feedback.

 Payout resets total and logs payout to History.

 Export/Import restores all state.

 Works offline after first load.

 No login, no external server, no trackers.

üëâ Task for Replit: Scaffold this app with the above requirements, using the provided stack, color palette, and design principles. Deliver a working PWA with clean /dist output, so it‚Äôs ready for Docker hosting now and Play Store submission (TWA or Capacitor) later.